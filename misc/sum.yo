0x000:                      |     .pos 0 #设置当前位置为0
0x000: 30f40002000000000000 |     irmovq stack,%rsp #设置栈指针
0x00a: 804800000000000000   |     call main
0x013: 00                   |     halt
                            | 
                            |     # 内存区域，存放数据/链表之类
                            |     #链表
0x018:                      |       	.align 8 #地址和8字节对齐
0x018:                      |     ele1:
0x018: 0a00000000000000     |       	.quad 0x00a
0x020: 2800000000000000     |     	.quad ele2
0x028:                      |     ele2:
0x028: b000000000000000     |   	.quad 0x0b0
0x030: 3800000000000000     |   	.quad ele3
0x038:                      |     ele3:
0x038: 000c000000000000     |   	.quad 0xc00
0x040: 0000000000000000     |   	.quad 0
                            |     # END
                            | 
                            | 
0x048:                      |     main: 
0x048: 30f71800000000000000 |     	irmovq ele1, %rdi #将链表的第一个元素ele1作为输入
0x052: 805c00000000000000   |   	call sum_list
0x05b: 90                   | 	ret
                            | 
0x05c:                      |     sum_list:
0x05c: a03f                 |     	pushq %rbx  #%rbx为被调用者保存寄存器，后面有用到该寄存器，所以需要先压入栈中
0x05e: 6300                 |   	xorq %rax,%rax #用%rax保存val值，首先置零
0x060: 707f00000000000000   | 	jmp test
0x069:                      |     loop:
0x069: 50370000000000000000 | 	mrmovq (%rdi), %rbx #将链节点中的val保存到%rbx中
0x073: 6030                 |         addq %rbx, %rax
0x075: 50770800000000000000 |         mrmovq 0x8(%rdi),%rdi #将当前指向链节点val地址的%rdi增加8字节，指向了保存下一个链节点地址的地址，再访问内存，得到下一个节点的地址
0x07f:                      |     test:
0x07f: 6277                 | 	andq %rdi,%rdi #对输入链节点进行判断,and指令，若rdi为0,则and后条件码置零
0x081: 746900000000000000   |    	jne loop #如果链节点是非零的，就进入循环loop jne:不想等/非零则跳
0x08a: b03f                 |         popq %rbx
0x08c: 90                   |         ret
                            | 
0x200:                      |     .pos 0x200 #设置栈地址
0x200:                      |    stack:
