0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack,%rsp #设置栈指针
0x00a: 804800000000000000   |     call main
0x013: 00                   |     halt
                            |   
                            |     # 内存区域，存放数据/链表之类
                            |     #链表
0x018:                      |       	.align 8 #地址和8字节对齐
0x018:                      |     ele1:
0x018: 0a00000000000000     |       	.quad 0x00a
0x020: 2800000000000000     |     	.quad ele2
0x028:                      |     ele2:
0x028: b000000000000000     |   	.quad 0x0b0
0x030: 3800000000000000     |   	.quad ele3
0x038:                      |     ele3:
0x038: 000c000000000000     |   	.quad 0xc00
0x040: 0000000000000000     |   	.quad 0
                            |     # END
                            |     
0x048:                      |     main:
0x048: 30f71800000000000000 |        	irmovq ele1,%rdi
0x052: 805c00000000000000   | 	call rsum_list
0x05b: 90                   | 	ret
                            | 
0x05c:                      |     rsum_list:
0x05c: a03f                 | 	pushq %rbx  #%rbx为被调用者保存寄存器，后面有用到该寄存器，所以需要先压入栈中
0x05e: 6300                 |   	xorq %rax,%rax #用%rax保存val值，首先置零
0x060: 6277                 | 	andq %rdi,%rdi #看是否为零
0x062: 738a00000000000000   |  	je finish #为零的话就跳到finish，开始出栈 
0x06b: 50370000000000000000 | 	mrmovq (%rdi), %rbx #val给到rbx
0x075: 50770800000000000000 |         mrmovq 0x8(%rdi),%rdi #node = node->next
0x07f: 805c00000000000000   |         call rsum_list #递归
0x088: 6030                 | 	addq %rbx, %rax #结果保存在%rax中
0x08a:                      |     finish:
0x08a: b03f                 | 	popq %rbx
0x08c: 90                   | 	ret
                            | 
0x200:                      |     .pos 0x200
0x200:                      |   stack:
                            | 
