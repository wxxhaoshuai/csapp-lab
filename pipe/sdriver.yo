                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6c800000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79000000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	#xorq %rax,%rax		# count = 0; 删掉，因为是单次程序，rax初始化就是0
0x032: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x034: 763e00000000000000   | 	jg Loop		# if so, goto Done:
0x03d: 90                   | 	ret
0x03e: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x048: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x052: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x054: 716700000000000000   | 	jle Npos		# if so, goto Npos:
0x05d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x067:                      | Npos:	
0x067: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x071: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
                            | 	#andq %rdx,%rdx		# len > 0?设计iaddq的时候，会让它顺便设置符号位。所以我们可以省去andq %rdx,%rdx这个操作再去设置符号位
0x07b: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--	
0x085: 763e00000000000000   | 	jg Loop			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x08e:                      | Done:
0x08e: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x08f:                      | End:
                            | #/* $end ncopy-ys */
0x08f:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x090:                      | 	.align 8
0x090:                      | src:
0x090: 0100000000000000     | 	.quad 1
0x098: 0200000000000000     | 	.quad 2
0x0a0: fdffffffffffffff     | 	.quad -3
0x0a8: fcffffffffffffff     | 	.quad -4
0x0b0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x0c0:                      | 	.align 16
0x0c0:                      | Predest:
0x0c0: fadebc0000000000     | 	.quad 0xbcdefa
0x0c8:                      | dest:
0x0c8: abefcd0000000000     | 	.quad 0xcdefab
0x0d0: abefcd0000000000     | 	.quad 0xcdefab
0x0d8: abefcd0000000000     | 	.quad 0xcdefab
0x0e0: abefcd0000000000     | 	.quad 0xcdefab
0x0e8:                      | Postdest:
0x0e8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x0f0:                      | .align 8
                            | # Run time stack
0x0f0: 0000000000000000     | 	.quad 0
0x0f8: 0000000000000000     | 	.quad 0
0x100: 0000000000000000     | 	.quad 0
0x108: 0000000000000000     | 	.quad 0
0x110: 0000000000000000     | 	.quad 0
0x118: 0000000000000000     | 	.quad 0
0x120: 0000000000000000     | 	.quad 0
0x128: 0000000000000000     | 	.quad 0
0x130: 0000000000000000     | 	.quad 0
0x138: 0000000000000000     | 	.quad 0
0x140: 0000000000000000     | 	.quad 0
0x148: 0000000000000000     | 	.quad 0
0x150: 0000000000000000     | 	.quad 0
0x158: 0000000000000000     | 	.quad 0
0x160: 0000000000000000     | 	.quad 0
0x168: 0000000000000000     | 	.quad 0
                            | 
0x170:                      | Stack:
